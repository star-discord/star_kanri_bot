const fs = require('fs');
const path = require('path');
const {
  EmbedBuilder,
  ActionRowBuilder,
  ButtonBuilder,
  ButtonStyle,
} = require('discord.js');
const { v4: uuidv4 } = require('uuid');
const tempState = require('../state/totsusunaTemp');
const { ensureGuildJSON, readJSON, writeJSON } = require('../../fileHelper');

module.exports = {
  customId: 'totsuna_setti:install',

  /**
   * 蜃ｸ繧ｹ繝願ｨｭ鄂ｮ縺ｮ蜃ｦ逅・
   * @param {import('discord.js').ButtonInteraction} interaction
   */
  async handle(interaction) {
    const guildId = interaction.guildId;
    const userId = interaction.user.id;

    try {
      // 荳譎ゆｿ晏ｭ倥ョ繝ｼ繧ｿ繧貞叙蠕・
      const state = tempState.get(guildId, userId);

      if (!state || !state.body || !state.installChannelId) {
        return await interaction.reply({
          content: '笞・・譛ｬ譁・∪縺溘・繝√Ε繝ｳ繝阪Ν險ｭ螳壹′荳崎ｶｳ縺励※縺・∪縺吶・,
          flags: MessageFlagsBitField.Ephemeral, // MessageFlags.Ephemeral
        });
      }

      // 譁ｰ隕酋UID逕滓・
      const uuid = uuidv4();

      // Embed繧呈ｧ狗ｯ・
      const embed = new EmbedBuilder()
        .setTitle('謄 蜃ｸ繧ｹ繝雁ｱ蜻雁女莉倅ｸｭ')
        .setDescription(state.body)
        .setColor(0x00bfff);

      // 繝懊ち繝ｳ繧呈ｧ狗ｯ会ｼ・UID莉倅ｸ趣ｼ・
      const button = new ButtonBuilder()
        .setCustomId(`totsuna:report:${uuid}`)
        .setLabel('蜃ｸ繧ｹ繝雁ｱ蜻・)
        .setStyle(ButtonStyle.Primary);

      const row = new ActionRowBuilder().addComponents(button);

      // 險ｭ鄂ｮ繝√Ε繝ｳ繝阪Ν繧貞叙蠕励＠騾∽ｿ｡
      const installChannel = await interaction.guild.channels.fetch(state.installChannelId);
      if (!installChannel?.isTextBased?.()) throw new Error('蟇ｾ雎｡繝√Ε繝ｳ繝阪Ν縺檎┌蜉ｹ縺ｧ縺・);

      const sentMessage = await installChannel.send({
        embeds: [embed],
        components: [row],
      });

      // JSON繝輔ぃ繧､繝ｫ縺ｮ貅門ｙ縺ｨ隱ｭ縺ｿ霎ｼ縺ｿ
      const jsonPath = await ensureGuildJSON(guildId);
      const json = await readJSON(jsonPath);

      // 蛻晄悄蛹門・逅・
      if (!json.totsuna) json.totsuna = {};
      if (!Array.isArray(json.totsuna.instances)) json.totsuna.instances = [];

      // 譁ｰ縺励＞險ｭ鄂ｮ諠・ｱ繧定ｿｽ蜉
      json.totsuna.instances.push({
        id: uuid,
        userId,
        body: state.body,
        installChannelId: state.installChannelId,
        replicateChannelIds: state.replicateChannelIds || [],
        messageId: sentMessage.id,
      });

      // JSON菫晏ｭ・
      await writeJSON(jsonPath, json);

      // 荳譎ゅョ繝ｼ繧ｿ蜑企勁
      tempState.delete(guildId, userId);

      // 謌仙粥繝ｬ繧ｹ繝昴Φ繧ｹ
      await interaction.reply({
        content: '笨・蜃ｸ繧ｹ繝願ｨｭ鄂ｮ縺悟ｮ御ｺ・＠縺ｾ縺励◆縲・,
        flags: MessageFlagsBitField.Ephemeral, // MessageFlags.Ephemeral
      });
    } catch (error) {
      console.error('[險ｭ鄂ｮ繝懊ち繝ｳ蜃ｦ逅・お繝ｩ繝ｼ]', error);

      const errorReply = {
        content: '笶・險ｭ鄂ｮ蜃ｦ逅・ｸｭ縺ｫ莠域悄縺帙〓繧ｨ繝ｩ繝ｼ縺檎匱逕溘＠縺ｾ縺励◆縲・,
        flags: MessageFlagsBitField.Ephemeral,
      };

      if (interaction.replied || interaction.deferred) {
        await interaction.followUp(errorReply);
      } else {
        await interaction.reply(errorReply);
      }
    }
  },
};
