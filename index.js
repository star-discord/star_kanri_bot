// ======== Âü∫Êú¨„É¢„Ç∏„É•„Éº„É´Ë™≠„ÅøËæº„Åø ========
const fs = require('fs');
const path = require('path');
const { Client, GatewayIntentBits, Collection } = require('discord.js');
require('dotenv').config();

// ======== Ëµ∑ÂãïÊôÇË®∫Êñ≠ ========
const { StartupDiagnostics } = require('./utils/startupDiagnostics');

async function runStartupDiagnostics() {
  const diagnostics = new StartupDiagnostics();
  const isHealthy = await diagnostics.runDiagnostics();
  
  if (!isHealthy) {
    console.log('‚ùå ÈáçË¶Å„Å™„Ç®„É©„Éº„Å´„Çà„ÇäBotËµ∑Âãï„Çí‰∏≠Ê≠¢„Åó„Åæ„Åô„ÄÇ');
    process.exit(1);
  }
  
  console.log('üöÄ Ë®∫Êñ≠ÂÆå‰∫Ü - BotÂàùÊúüÂåñ„ÇíÁ∂ôÁ∂ö„Åó„Åæ„Åô...\n');
}

// Ë®∫Êñ≠ÂÆüË°å
runStartupDiagnostics().then(() => {
  console.log('üì° BotÂàùÊúüÂåñ„Éó„É≠„Çª„ÇπÈñãÂßã');
}).catch(console.error);

// ======== .env „ÉÅ„Çß„ÉÉ„ÇØ ========
if (!process.env.DISCORD_TOKEN) {
  console.error('‚ùå DISCORD_TOKEN „Åå .env „Å´ÂÆöÁæ©„Åï„Çå„Å¶„ÅÑ„Åæ„Åõ„Çì„ÄÇ');
  process.exit(1);
}

// ======== Bot „ÇØ„É©„Ç§„Ç¢„É≥„ÉàÂàùÊúüÂåñ ========
const client = new Client({
  intents: [
    GatewayIntentBits.Guilds,
    GatewayIntentBits.GuildMessages,
    // GatewayIntentBits.MessageContent, // „É°„ÉÉ„Çª„Éº„Ç∏Êú¨Êñá„ÅåÂøÖË¶Å„Å™Â†¥Âêà„ÅÆ„ÅøÊúâÂäπÂåñ
  ],
});

client.commands = new Collection();

// ======== „Ç≥„Éû„É≥„ÉâË™≠„ÅøËæº„ÅøÈñ¢Êï∞ ========
function loadCommandFiles(dir) {
  const entries = fs.readdirSync(dir, { withFileTypes: true });

  for (const entry of entries) {
    const fullPath = path.join(dir, entry.name);
    if (entry.isDirectory()) {
      loadCommandFiles(fullPath); // ÂÜçÂ∏∞
    } else if (entry.name.endsWith('.js')) {
      try {
        const command = require(fullPath);
        if (command?.data?.name && typeof command.execute === 'function') {
          client.commands.set(command.data.name, command);
          console.log(`‚úÖ „Ç≥„Éû„É≥„ÉâË™≠„ÅøËæº„Åø: ${command.data.name}`);
        } else {
          console.warn(`‚ö†Ô∏è ÁÑ°Âäπ„Å™„Ç≥„Éû„É≥„ÉâÂΩ¢Âºè: ${fullPath}`);
        }
      } catch (err) {
        console.error(`‚ùå „Ç≥„Éû„É≥„ÉâË™≠ËæºÂ§±Êïó: ${fullPath}`, err);
      }
    }
  }
}

// ======== „Ç≥„Éû„É≥„ÉâË™≠„ÅøËæº„ÅøÂÆüË°å ========
loadCommandFiles(path.join(__dirname, 'commands'));
console.log(`üß© ÂêàË®à ${client.commands.size} ÂÄã„ÅÆ„Ç≥„Éû„É≥„Éâ„ÇíË™≠„ÅøËæº„Åø„Åæ„Åó„Åü„ÄÇ`);

// ======== „Ç§„Éô„É≥„ÉàË™≠„ÅøËæº„Åø ========
const eventsPath = path.join(__dirname, 'events');
if (fs.existsSync(eventsPath)) {
  const eventFiles = fs.readdirSync(eventsPath).filter(file => file.endsWith('.js'));

  for (const file of eventFiles) {
    const filePath = path.join(eventsPath, file);
    try {
      const event = require(filePath);
      if (event?.name && typeof event.execute === 'function') {
        const bindFn = (...args) => event.execute(...args, client);
        event.once ? client.once(event.name, bindFn) : client.on(event.name, bindFn);
        console.log(`üì° „Ç§„Éô„É≥„ÉàÁôªÈå≤: ${event.name}`);
      } else {
        console.warn(`‚ö†Ô∏è ÁÑ°Âäπ„Å™„Ç§„Éô„É≥„Éà„Éï„Ç°„Ç§„É´: ${file}`);
      }
    } catch (err) {
      console.error(`‚ùå „Ç§„Éô„É≥„ÉàË™≠ËæºÂ§±Êïó: ${file}`, err);
    }
  }

  console.log(`üîî ÂêàË®à ${eventFiles.length} ÂÄã„ÅÆ„Ç§„Éô„É≥„Éà„ÇíÁôªÈå≤„Åó„Åæ„Åó„Åü„ÄÇ`);
}

// ======== „Ç§„É≥„Çø„É©„ÇØ„Ç∑„Éß„É≥„Éè„É≥„Éâ„É©„Éº ========
const { handleButton } = require('./utils/buttonsHandler');
const { handleModal } = require('./utils/modalsHandler');
const { handleSelect } = require('./utils/selectsHandler');

client.on('interactionCreate', async interaction => {
  try {
    if (interaction.isChatInputCommand()) {
      const command = client.commands.get(interaction.commandName);
      if (!command) return;
      await command.execute(interaction);
    } else if (interaction.isButton()) {
      await handleButton(interaction);
    } else if (interaction.isStringSelectMenu()) {
      await handleSelect(interaction);
    } else if (interaction.isModalSubmit()) {
      await handleModal(interaction);
    }
  } catch (err) {
    console.error('‚ùå interactionCreate„Éè„É≥„Éâ„É™„É≥„Ç∞„Ç®„É©„Éº', err);
    if (!interaction.replied && !interaction.deferred) {
      await interaction.reply({ content: '‚ùå ‰∫àÊúü„Åõ„Å¨„Ç®„É©„Éº„ÅåÁô∫Áîü„Åó„Åæ„Åó„Åü„ÄÇ', ephemeral: true });
    }
  }
});

// ======== Ëµ∑Âãï„É≠„Ç∞ ========
client.once('ready', () => {
  console.log(`üéâ Bot Ëµ∑ÂãïÂÆå‰∫ÜÔºÅ„É≠„Ç∞„Ç§„É≥: ${client.user.tag}`);
});

// ======== Discord„Å´„É≠„Ç∞„Ç§„É≥ ========
client.login(process.env.DISCORD_TOKEN);

// ======== „Ç®„É©„Éº„Éï„ÉÉ„ÇØÔºàÈñãÁô∫‰∏≠Êé®Â•®Ôºâ ========
process.on('unhandledRejection', (reason) => {
  console.error('‚ùå [UnhandledRejection]', reason);
});
process.on('uncaughtException', (err) => {
  console.error('‚ùå [UncaughtException]', err);
});
